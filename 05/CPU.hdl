// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Mux16(a=instruction , b=ALUout , sel=instruction[15] , out=MUX1out );
    Not(in=instruction[15] , out=No15 );
    Or(a=No15 , b=instruction[5] , out=Aloader );
    ARegister(in=MUX1out , load=Aloader , out=regAout , out[0..14]=addressM);
    And(a= instruction[12], b=instruction[15] , out=Muxloader );
    Mux16(a=regAout , b=inM , sel=Muxloader , out=MUX2out );
    And(a=instruction[15] , b=instruction[4] , out=Dloader );
    DRegister(in=ALUout , load=Dloader , out=regDout );
    ALU(x=regDout , y=MUX2out , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out= ALUout, out=outM , zr=zr , ng=ng );
    And(a=instruction[3] , b=instruction[15] , out=writeM  );
    PC(in=regAout , load= load , inc=true , reset=reset , out[0..14]=pc );
    And(a=instruction[15] , b=instruction[2] , out=selj1 );
    And(a=instruction[15] , b=instruction[1] , out=selj2 );
    And(a=instruction[15] , b=instruction[0] , out=selj3 );
    And(a=selj1 , b=ng , out=j1ng );
    And(a=selj2 , b=zr , out=j2zr );
    And(a=selj3 , b=pos , out=j3pos ); 
    And(a=Nng , b= Nzr, out= pos );
    Not(in=ng , out=Nng);
    Not(in=zr , out=Nzr);
    Or(a=j1ng, b=j2zr, out=temp);
    Or(a=temp, b=j3pos, out=load);
}